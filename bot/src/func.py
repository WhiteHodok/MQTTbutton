import asyncio
import json
import logging
from aiomqtt import Client as MqttClient
from aiogram import Bot
from config import MQTTsetting

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("MQTT")


class MQTTListener:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_chats = set()
        self.client = None
        self._task = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ MQTT –∫–ª–∏–µ–Ω—Ç–∞"""
        self._task = asyncio.create_task(self._mqtt_loop())
        logger.info("MQTT listener task started")

    async def _mqtt_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                async with MqttClient(
                        hostname=MQTTsetting.MQTT_SERVER,
                        port=1883,
                        username=MQTTsetting.MQTT_USER,
                        password=MQTTsetting.MQTT_PASS
                ) as client:
                    self.client = client
                    await client.subscribe(MQTTsetting.MQTT_TOPIC)
                    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É")

                    async for message in client.messages:
                        await self._process_message(message)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                await asyncio.sleep(5)

    async def _process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            payload = json.loads(message.payload.decode())
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ: {payload}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            text = self._format_message(payload)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {self.active_chats}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º
            if not self.active_chats:
                logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return

            for chat_id in list(self.active_chats):
                try:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {text}")
                    await self.bot.send_message(chat_id, text)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                    # –í–æ–∑–º–æ–∂–Ω–æ, —á–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                    self.active_chats.discard(chat_id)

        except json.JSONDecodeError:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {message.payload}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def _format_message(self, payload: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        event = payload.get("event", "unknown")
        count = payload.get("count", 1)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –∏ —Å—á–µ—Ç—á–∏–∫–∞
        if event == "press":
            return f"üîò –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (—Å—á–µ—Ç—á–∏–∫: {count})"
        elif event == "long_press":
            return f"üî¥ –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (—Å—á–µ—Ç—á–∏–∫: {count})"
        elif event == "series_end":
            return f"üî¢ –°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {count} –Ω–∞–∂–∞—Ç–∏–π"
        else:
            return f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event} (—Å—á–µ—Ç—á–∏–∫: {count})"

    def add_chat(self, chat_id: int):
        self.active_chats.add(chat_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç {chat_id}. –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {self.active_chats}")

    def remove_chat(self, chat_id: int):
        self.active_chats.discard(chat_id)
        logger.info(f"–£–¥–∞–ª–µ–Ω —á–∞—Ç {chat_id}. –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {self.active_chats}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ MQTT –∫–ª–∏–µ–Ω—Ç–∞"""
        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        if self.client:
            await self.client.disconnect()
        logger.info("MQTT listener stopped")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
mqtt_listener = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
def set_mqtt_listener(listener_instance):
    global mqtt_listener
    mqtt_listener = listener_instance
    logger.info("Global MQTT listener instance has been set")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
def get_mqtt_listener():
    global mqtt_listener
    return mqtt_listener